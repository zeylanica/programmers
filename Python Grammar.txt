주석
----------------------------------------------------------------
# 주석입니다. #

"""
줄을 바꿔도 되는 주석입니다.
"""
----------------------------------------------------------------

자료형

숫자
----------------------------------------------------------------
정수	123,	-123
실수	123.45,	-123.45
복소수	1+2j,	1-2j
8진수	0o34,	0o25
16진수	0x2A,	0xF0

4.24E10	=	4.24*10^10
4.24E-10	=	4.24*10^-10
----------------------------------------------------------------
복소수
a.real 		= 실수 부분을 리턴
a.imag 		= 허수 부분을 리턴
a.conjugate()	= 켤레복소수를 리턴
abs(a)		= 절대값을 리턴

a**b		= 제곱.	a^b
a//b		= 소수점 아래자리 제거

숫자와 문자열은 불변형이다. id로 찍어보면 값이 다르다.

문자열

"Hello World!"
'Hello World!'
"""		'''
Hello 		Hello 
World!		World!
"""		'''

문자열 안 특수문자
"python's Say"
'"Python says" he says.'

문자열 연산
head = 'python'
tail = 'is fun'
return(head + tail) = 'python is fun'
return(head*2) = 'pythonpython'
head[3] = 'h',	head[-1] = 'n'

문자열 슬라이스
exam = 'Life is too short, you need python'
exam[0:3] = 'Life'	exam[5:7] = is	exam[19:] = 'you need python'	exam[:17] = 'Life is too short'
exam[:] = 'Life is too short, you need python'	exam[19:-7] = 'you need'

exam = 'Pithon'
exam[:1] + 'y' + exam[2:] = 'Python'

문자열 포매팅
숫자(%d)		"I eat %d apples" %3	
number = 3	"I eat %d apples" %number
문자열(%s)	"I eat %s apples" %"five"
number = 10	day = "three"
"I ate %d apples, so i was sick for %s days." %(number, day)
%s 포매팅은 뒤에 오는 값을 무조건 문자열로 변환해 넣어버린다.

정렬 포매팅
"%10s" %"hi"	=	'	hi'
(전체 길이 10개에 hi는 2개를 차지, 앞에 공백이 8개
"%-10s" %"hi"	=	'hi	'
(전체 길이 10개에 hi는 앞의 2개를 차지, 뒤의 공백이 8개

"%0.4f" %3.412341234 = "3.4123"	(소수점 이하 표시 자리수)

문자열 함수들
exam = "Hobbycandle"
exam.count(b) = 2					문자 b 의 개수를 리턴
exam.find(b) = 2					문자 b 가 처음 나온곳을 리턴, 해당 문자가 문자열 내에 없으면 -1 리턴
exam.index(b) = 2					위와 같지만 없는 문자를 찝으면 컴파일 에러
exam.join('abc') = aHobbycandlebHobbycandlec		'abc' 라는 각각의 문자 사이에 변수값 'Hobbycandle' 을 대입
exam.upper() = 'HOBBYCANDLE'			소문자를 전부 대문자로
exam.lower() = 'hobbycandle'			대문자를 전부 소문자로
exam.lstrip()					왼쪽 공백 삭제
exam.rstrip()					오른쪽 공백 삭제
exam.strip()					양쪽 공백 삭제
exam.replace("candle","strip") = "Hobbystrip"		문자열 대체
exam.split(),exam.split(":")				문자열을 나눈다. 나눈 문자열은 리스트로 저장. () 안의 기호는 문자열을 나누는 기준이 된다.

format 을 이용한 문자열 포매팅들
"I eat {0} apples".format(3) = "I eat 3 apples"		{0} 에 format 괄호 안의 숫자 또는 문자가 들어간다.
number = 3, day = "three"
"I ate {0} apples. So i was sick for {1} days".format(number,day)
= "I ate 3 apples. So i was sick for three days."		{0}, {1} 에 format 괄호 안 변수의 순서대로 들어감.
"I ate {number} apples. So i was sick for {day} days".format(number = 10,day = 3)
= I ate 10 apples. So i was sick for three days		중괄호 안을 이름 형태로 지정하고 넣을 수 있다. {name = val}. 이는 {0} 과 혼용해서 사용할 수도 있다.
						혼용 시, {0} 를 담당하는 val 은 항상 앞에 와야한다.
ex : "I eat {number} apples. So i was sick {0} days.".format(3, number=10)

"{0:<10}".format("hi") = "hi	"	"{0:^10}".format("hi") = "     hi     "
"{0:>10}".format("hi") = "	hi"	"{0:=^10}".foramt("hi") = "====hi===="
정렬기호 <는 오른쪽을 공백으로, >는 왼쪽을 공백으로, ^ 는 양 옆을 같은 수치로 공백으로 채운다.
정렬기호와 : 사이에 어떤 문자을 넣으면 공백을 해당 문자로 치환한다.

print 사용시 뒤의 변수가 2개이상 올 경우 괄호로 묶어줘야 한다.
print("%d %d" %(x, y))
print 로 콘솔에 보여줄 것을 입력하고 뒤에 end 인자가 오면 줄바꿈을 자동적으로 하지 않는다.
print("", end = "") 

* 리스트 / 집합 / 튜플은 서로 변환될 수 있다.

리스트 자료형

선언
odd = [1,3,5,7,9]		a=[]	b=[1,2,'life','is']	c=[1,2,['life','ls']]
삼중 리스트도 c와 비슷한 방법으로 가능하다.

접근
odd[0] = 1	odd[3] = 7	odd[-1] = 9	c[2] = ['ilfe','is']	c[2][0] = 'life'

리스트 슬라이싱
a = [1,2,3,4,5]	b = [1,2,['a','b','c'],3,4,5]

a[0:2] = [1,2]	a[:3] = [1,2,3]	a[3:] = [4,5]
b[1:4] = [2,['a','b','c'],3]	b[2][:2] = ['a','b']

리스트 연산
a = [1,2,3,4,5]	b = [6,7,8,9,0]

a + b = [1,2,3,4,5,6,7,8,9,0]
a * 2 = [1,2,3,4,5,1,2,3,4,5]

리스트 값 수정
a = [1,2,3,4,5]
a[3] = 'a'		a = [1,2,3,'a',5]
a[1:2] = ['a','b','c']  	a = [1,'a','b','c',3,4,5]
a[1] = ['a','b','c']	a = [1,['a','b','c'],3,4,5]
a[1:3] = []	a = [1,4,5]

리스트 에서 쓰이는 함수들
a = [1,2,3,4,5]

del a[0]					a = [2,3,4,5]     	/ a[0] 에 있는 객체를 삭제한다.
a.append(6) 				a = [1,2,3,4,5,6] 	/ 맨 마지막에 값을 추가한다.
a.sort()					오름차순으로 정리한다. 문자열도 정리가 가능하다.
a.reverse()				a = [5,4,3,2,1]	/ 역순으로 뒤집는다.
a.index(3)					2		/ 해당 값이 있으면 해당 값의 위치를 리턴한다. 문자열도 가능하다.
a.insert(1,9)				a = [1,9,2,3,4,5]	/ x 번째 위치에 y 값을 삽입한다.
a.remove(4)				a = [1,2,3,5]	/ 첫 번째 나오는 x 값을 삭제한다.
a.pop()					5, a = [1,2,3,4]	/ 리스트의 맨 마지막 요소를 리턴하고 해당 리스트에서 그 값을 삭제한다.
a.pop(3)					4, a = [1,2,3,5]	/ 리스트의 x 번째 요소를 리턴하고 해당 리스트에서 그 값을 삭제한다.
a.count(1)				1 		/ 리스트 내에 x 가 몇개 들어있는지 계산한다.
a.extend([7,8])				a = [1,2,3,4,5,7,8]	/ 리스트 끝에 해당 리스트를 더한다. extend 에는 리스트 형만 올수 있다.

리스트를 변수에 넣고 복사하고자 할 때
a = [1,2,3]
b = a
a[1] = 4					/ 이렇게 할 경우, b 의 값까지 변경되어 버린다. a,b 둘다 같은 리스트를 가리키고 있기 때문. 
					/ 이것을 얕은 복사라 칭한다. id 주소값이 서로 같다.

a = [1,2,3]
b = a[:]	<- a 리스트 전체를 복사한다.		/ 이렇게 해야 함. 이것을 깊은 복사라 한다.

아니면 copy 모듈을 이용한다.
import copy
b = copy(a)				
b = deepcopy(a)

튜플 자료형

선언	/ 한개의 요소만을 가질 때에는 항상 요소 뒤에 콤마를 붙여줘야 한다.
튜플은 요소값을 변경할 수 없다. 단지 인덱싱, 슬라이싱, 더하기 등만 가능하다.
t1 = ()	t2 = (1,)		t3 = 1,2,3	t4 = ('a','b',('ab','cd'))

튜플 다루기
t1 = (1,2,3,4)	t2 = ('a','b','c','d')		t3 = (1,2,('a','b'))

t1[1] = 2		t3[2][0] = 'a'			/ 인덱싱
t1[1:] = (2,3,4)					/ 슬라이싱
t1 + t2 = (1,2,3,4,'a','b','c','d')			/ 더하기
t1 * 3 = (1,2,3,4,1,2,3,4,1,2,3,4)			/ 곱하기


딕셔너리 자료형
{Key1 : Value1, Key2 : Value2 ....}
* Key 값은 한 딕셔너리 안의 고유한 값이다. 중복되는 Key 값을 설정하면 하나를 제외한 나머지 것들이 모두 무시가 된다.

선언
dlc1 = {'name' : 'zeylanica' , 'phone' : '01028817103' , 'birth' : '910304'}
dlc2 = {192 : 'number'}		/ 키를 정수 값으로, 값을 문자열로 
dlc3 = {'list' : [1,2,3,4,5]}		/ 값으로 다른 자료형을 넣을수 있다. 키로는 넣을 수 없다.
dlc4 = {'dlct1' : {'dlct2' : {'dlct3' : 123}}}/ 여러 개의 딕셔너리 안 딕셔너리도 가능하다.

접근
dlc1['name'] = 'zeylanica'			/ Key 가 name 인 딕셔너리의 Value를 반환
dlc2[192] = 'number'			/ Key 가 정수 192 인 딕셔너리의 Value를 반환. 192 번째의 값을 반환하는것이 아님.
dlc4['dlct1']['dlct2']['dlct3'] = 123		/ 여러개 딕셔너리 중첩인 경우 이렇게 접근

요소 추가, 삭제
dlc1['height'] = 178			/ dlc1 에 키가 height 이고 값이 178 인 쌍을 추가한다. 딕셔너리에 순서는 상관이 없다.
dlc2[2.43] = 'realnumber'			/ dlc2 에 키가 2.43 이고 값이 'realnumber' 인 쌍을 추가한다.
del dlc1['name']				/ dlc1 에 'name' Key 를 삭제한다. 

딕셔너리에서 쓰이는 함수들
dlc1.keys() = dlct_keys(['name','phone','birth'])			/ 딕셔너리의 키 값들이 리턴된다. 리스트 형태지만, 리스트 고유의 함수들은 쓸 수 없다. for 문에 넣는 정도는 가능.
							/ list(dlc1.keys()) 이렇게 하면 리스트로 반환된다.
dlc1.values() = dlct_values(['zeylanica','01028817103','910304]) 	/ 딕셔너리의 값 항목이 리턴된다. 키 값들이 리턴된 것과 같다.
dlc1.items() = dlct_times([('name' , 'zeylanica') , ('phone' , '01028817103') , ('birth' , '910304')])
							/ items 는 key 와 value 값이 튜플로 묶여 리턴된다.
dlc1.clear() = {}						/ 딕셔너리 안의 모든 값을 삭제한다.
dlc1.get('name') = 'zeylanica'					/ Key 에 대응하는 Value 값을 돌려준다. 없는 Key 를 가져오려 할 경우 None 을 리턴한다.
dlc1.get('foo', 'defal') = 'defal'				/ 해당 Key 가 없는 경우 미리 정해 둔 값을 리턴한다. 이 경우 foo 의 키가 딕셔너리 안에 없으므로 'defal' 을 리턴한다.
'name' in dlc1						/ 해당 Key 가 dlc1 에 있는지 검사한다. 없으면 false 를 리턴한다.

집합 자료형
집합 자료형은 중복을 허용하지 않고, 순서가 없다. 따라서 인덱싱을 할 수 없다.
집합 자료형에 저장된 값을 인덱싱으로 접근하고 싶다면 리스트, 튜플 화 해야 한다.

선언
s1 = set([1,2,3])	s2 = set("Hello")
{1,2,3}		{'H', 'o', 'e', 'l'}		/ 중복을 허용하지 않아 Hello 라는 문자열의 l 을 하나 없앴다.

교집합, 차집합, 합집합
s1 = set([1,2,3,4,5])		s2 = set([2,4,6,8,0])

s1 & s2 = {2, 4}				/ 교집합
s1 | s2 = {0, 1, 2, 3, 4, 5, 6, 8}		/ 합집합
s1 - s2 = {1, 3, 5}				/ 차집합

집합에서 쓰이는 함수들
s1.intersection(s2)				/ 교집합
s1.union(s2)				/ 합집합
s1.difference(s2)				/ 차집합
s1.add(6)					/ x 값 1개 추가,
s1.update([6,7,8])				/ 값 여러개 추가.
s1.remove(1)				/ x 값을 제거.

변수 만들기
a = 3		b = "hello world!"
a, b = ('python', 'life')			// a = 'python' b = 'life'
a = b = 3

변수 바꾸기
a, b = b, a

특수 연산자
is			~ 이면				x is 0
x or y			x 또는 y 가 참이면			if x >y or x == 0 :
x and y			x 와 y 둘다 참이면		
not x			x 가 거짓이면
x in [리스트]		[리스트] 안에 x 가 있으면
x in (튜플)		(튜플) 안에 x 가 있으면
x in "문자열"		"문자열" 안에 x 가 있으면
x not in [리스트]		[리스트] 안에 x 가 없으면

조건, 반복
// 항상 조건 후 : 콜론을 붙여야 한다.

if 조건 :			/ if a>0 :
	print()
elif 조건 :			/ else if
	print()
else:
	print()
pass 			/ 아무런 행동을 하지 않는다. 패스를 걸어도 바로 뒷 줄이 실행은 된다.


while 조건 :		/ while a>0:
continue			/ while 문장의 맨 처음으로 돌아간다. for 문에서도 사용 가능하다. for 도 역시 문장의 맨 처음으로 돌아간다.

for 조건 :			/ for 변수 in 리스트(튜플,문자열)	[1,2,3] 안에 있는 값을 왼쪽부터 꺼내 a 라는 변수에 맞나 대입
for a in [1,2,3]:
	print()

전형적 for 문
for i in [1,2,3] :
	print(i)		/ 1,2,3 이 출력된다. 왼쪽부터 차례로 대입됨.

이렇게도 가능.
a = [(1,2),(3,4,),(5,6)]

for (x,y) in a
	print(x+y)		/ 3,7,11 이 출력된다. 리스트의 요소값이 튜플이라 자동으로 변수에 대입된다.

리스트 내포 for 문			/ [변수+표현식 for 변수 in 반복객체 if 조건]
ex) 	a = [1,2,3,4]
	result = [num * 3 for num in a if num % 2 != 0]		
	result = [3,9]		/ 결과
2개 이상의 for 문을 내포할 시	/ [표현식 for 변수1 in 반복객체1 if 조건1
					for 변수2 in 반복객체2 if 조건2]
ex)	result = [x*y for x in range(2,10)
		for y in range(1,10)]
	result = [2단부터 9단까지의 구구단 값을 전부 객체로 갖는다.]

조건, 반복에서 적절히 쓰이는 함수
range(x,y)			/ x부터 y-1 까지의 숫자를 포함하는 range 객체를 만들어준다. range(x) 는 0부터 x-1 까지다.


함수
//함수의 결과값은 언제나 하나이다. 2개를 돌려줘도 튜플 형태인 1개 값으로 저장된다.
//함수도 예외없이 return 을 만나면 자동으로 즉시 해당 함수를 빠져나가진다.
def sum(a,b):
	return a+b
def.. 함수를 만들 때 사용하는 예약어

def sum_many(*args):	// C 와 비슷하다. 입력값이 몇개가 올 지 모르면 이렇게 * 를 붙여서 사용한다.
	sum = 0
	for i in args:
		sum = sum + i
	return sum

def sum_mul(val, *args):	// val 에는 입력받을 값 하나, 뒤는 얼마나 올지 모를 때.

def sum_mul(a,b):
	return a+b, a*b	// 이럴 경우 받는 쪽에선 (a+b, a*b) 형태의 튜플로 저장된다.
a,b = sum_mul(a,b)		// 튜플로 돌려주므로 이렇게 하면 a = a+b, b = a*b 형태로 저장된다.

def say_name(name, old, man=True):	// 인수에 초기값을 줄 때는 반드시 인수의 위치를 뒤로 줘야한다.
	if man :
		....
def sum(a=10,b=20):	// 이럴경우 아무것도 안 넘기면 초기값인 a에 10, b에 20 이 들어간다. 
	return a+b

sum(b=20,a=10)		// 이렇게 부를 경우 위치가 바뀌어도 제대로 키 값에 맞춰 들어가진다.

def sum(**user):		//있을수도 있고, 없을수도 있는 정의되지 않은 인자를 사전 형식으로 받을 수 있음.

sum.__doc__ = "설명"	//함수에 대한 설명을 정의.
help(add)


global 변수		// 전역 변수화 해줌.
a = 1
def vartest()
	global a		//이게 있어서 전역에 있는 a 에 참조가 가능하다.
	a = 3		// 전역 변수인 a 값이 1이었다가 3으로 변경되었다.
	a = a + 1	
vartest()			// 이때 전역변수화 되어 함수 밖의 변수에 접근된다.

입 / 출력 함수들
a = input("질문할 내용")		// 사용자에게 입력을 받는다. 그것을 a 에 저장시킨다. input 은 입력되는 모든 것은 문자열 취급한다.

print 함수의 쓰임에 대해
print("life" "is" "too" "short")		// lifeistooshort 		큰 따옴표로 둘러쌓인 문자열은 + 연산과 동일해진다.
print("life", "is", "too", "short")	// life is too short		문자열 안 띄어쓰기는 , 로 한다.
print(x, end = '')			// 한 줄에 결과값을 계속 나타내려면 끝에 end 인수를 준다.

파일 실행 시 입력 인수 받기
import sys 			/ sys 모듈이 필요해 가져온다.
args = sys.argv[1:]			/ 인수들이 sys.argv 의 리스트로 들어온다. 
				/ python.py aaa bbb cc 로 실행했다면 argv[0] = python.py, argv[1] = aaa, argv[2] = bbb, argv[3] = cc 가 된다.

파일입출력
f = open("파일명", '모드')		/ 'r' 읽기, 'w' 쓰기, 'a' 추가. 추가는 파일의 마지막에 새로 내용을 추가할 때 사용한다.
				/ 쓰기 모드로 열게 되면 해당 파일이 존재할 시, 원래 있던 내용이 모두 사라진다! 없던 파일이면 생성해버린다.
with open("파일명", "모드") as f:	/ 위의 문법과 같지만, 이렇게 실행하면 해당 블록이 끝난 후 자동으로 close() 된다.

f.close()				/ 열었던 파일을 닫는다.
f.write(data)			/ 열은 파일에 내용을 쓴다.
f.readline()			/ 줄을 처음부터 차례대로 읽어들인다. 만약 줄이 없으면 NONE 을 리턴한다.
f.readlines()			/ 파일의 모든 라인을 읽어 각각의 줄을 요소로 같은 리스트로 리턴한다.
f.read()				/ 파일의 내용 전체를 리턴한다.


클래스 : 개발자에게 필요한 새로운 형식을 정의
인스턴스 : 클래스를 복사해서 생성한 복사본

*객체지향의 3대 특징
추상화 : 필요한 부분만 구현한다.
상속 : 부모클래스의 공통부분을 상속받는다.
다형성 : 동일 interface 에서 인스턴스마다 다른 동작을 할수 있다.

생성자 : __init__ : 클래스의 인스턴스가 만들어 질 때 불러지는 것
소멸자 : __del__ : 인스턴스가 소멸될 때 자동으로 불러지는 것

_name 		: 다른 파일에서 접근 불가능
__name__	 	: 파이선 내부 시스템 정의
__name		: private. 외부에서 접근할 수 없음.

선언
class Service:				/ 클래스 이름
	Service_item = "ITEM"		/ 클래스 변수. 인스턴스를 만들 시 모두 같은 값을 가지게 한다.
	def sum(self,a,b) :			/ 클래스 함수. 클래스 내 함수의 첫 번째 인수는 항상 self 이다. (클래스 내부의 함수를 메소드라고 한다.)
		return a+b
	def setname(self,name):		/ self 는 자기 자신을 뜻한다. 밑의 self.name 은 곧 객체를 불럿을 때의 변수.name 으로도 통한다.
		self.name = name
	def __init__(self,name):		/ __init__ 은 인스턴스를 만들 때 항상 실행된다. 따라서 인스턴스를 만들 때 이제 이름 변수가 필요하다.
		self.name = name
	def __del__(self,name):		/ __del__ 은 인스턴스가 소멸될 때 항상 실행된다. (참조가 0이 될 때)
		print("Deleted!")

user = Service()				/ 클래스 만들기. user를 인스턴스라고 한다.
a = user.Service_item			/ 클래스 내부 변수 접근
Service.otherItem = "OtherItem"		/ 클래스에 없는 변수를 이런식으로 만들 수 있다. 동적할당.
user.another = "ITEM"			/ 물론 인스턴스에 없는 변수를 만들 수도 있다.


상속

class AnotherService(Service):		/ Service 클래스를 상속받는다.
	def sum(self,a,b):			/ 오버라이드 (override) 할 수 있다. 상속받은 클래스의 메서드 이름은 같지만, 행동을 다르게 해야 할 때.
		return (a+b)*2		
	def __add__(self,other):		/ 오버 로딩 (overloading) 할 수 있다. 원래는 같은 이름의 메서드를 여러개 가지면서 매개변수의 유형, 개수를 다르게 하는 것이지만
		return self.a + other.a	/ 파이선에서는 연산자를 객체끼리 사용할 수 있게 하는 기법으로 쓰인다.

다중상속					/ 2개 이상의 클래스를 동시에 상속받을 수 있다.
class Tiger:
	def jump(self):
		print("호랑이")
	def cry(self):			//다중 상속시 메소드 이름이 겹칠 경우
		print("호랑이어흥")
class Lion:
	def play(self):
		print("사자")
	def cry(self):
		print("사자으르렁")
class Liger(Tiger,Lion):			// 상속받은 순서에 따라 처리. Tiger 가 앞에 있어 cry 를 호출하면 "호랑이어흥" 이 나온다.
	....ETC...



정적 메소드 (static Method)
클래스에서 직접 호출할 수 있는 메소드. 정의 시 self 인자를 선언하지 않음.
클래스 인스턴스에 적용 x, 클래스.method 로 호출.

class MyCal(object):
	@staticmethod			/ 꾸밈
	def my_add(x,y):			/ 정적 메소드. self 변수를 받지 않음.
		return x+y		



모듈


함수나 변수, 클래스 등을 모아놓은 파일.

#mod1.py 				/ 다른 파이선 파일
def sum(a,b):
	return a+b

#main.py					
import mod1				/ main 에서 mod1 에 있는 것을 부를때는 이렇게 한다.
mod1.sum(3,4)				/ 이런 식으로 mod1에 있는 함수를 사용한다.

import 모듈 as 이름			/ 해당 모듈을 해당 이름으로 가져온다.

from mod1 import sum, 다른함수		/ 이렇게 불러오면 mod1.sum 으로 사용하지 않고 바로 sum 으로 사용할 수 있게된다.
from 모듈 import *				/ 해당 모듈의 모든 메소드 / 어트리뷰트를 가져온다.

if __name__ == "__main__":			/ 이 구문은 직접 파일을 실행시킬 때만 실행하도록 하는 구문이다.
	print("...etc")			/ print 등과 같은 구문은 import 시 실행될 수 있기 때문에 넣는다.


패키지

(.)도트를 이용하여 파이썬 모듈을 계층적 구조로 관리할 수 있게 해주는 장치.
같은 폴더 내에 있으면 가능. Doit_Package 로 실험을 했음.
만약 파일 구조가 이렇게 있는 경우
main.py
game\
	__init__.py
	graphic\
		__init__.py
		render.py
	sound\
		__init__.py
		echo.py

main.py 에서는 다음과 같이 import 를 할 수 있다.

import game.sound.echo			/ 같은 폴더 내에 game 하위 폴더에 접근, 그 하위 폴더인 sound 에 접근, 거기에 있는 echo를 import 시킨다.
game.sound.echo.함수명..			/ 이런 형식으로 사용할 수 있다.

from game.sound import echo		/ echo 모듈이 있는 디렉터리 까지를 from 을 사용해서 import 한다.
echo.함수명...				/ 이런 형식으로 사용할 수 있다.

from game.sound.echo import echo.함수명	/ 아예 하위까지 전부 들어가 해당 함수만을 import 한다.
echo.함수명				/ 당연히 해당 함수만 사용할 수 있다.

import game				/ 해당 디렉터리의 모듈을 가져오거나, 해당 디렉터리의 __init__ 에 정의된 것만 참조할 수 있다.
game.sound.echo.함수명			/ 따라서 __init__ 을 정의하지 않았으면 다음과 같이 사용할 수 없다.

__init__.py 의 용도 : 해당 디렉터리가 패키지의 일부임을 알려주는 역할을 한다. 만약 없으면 패키지로 인식하지 않는다.

__all__.py 의 용도 :
만약 이렇게 import 를 실행할 경우 오류를 뱉는다. 맞는 구문이지만 echo 라는 이름이 정의되지 않았다는 소리를 한다.

from game.sound import *			/ game.sound 패키지에 있는 모든 파일을 import 한다.
echo.함수명

이렇게 특정 디렉터리의 모듈을 * 들을 이용하여 import 할 때는 다음과 같이 해당 디렉터리의 __init__.py 파일에 __all__ 이라는 변수를 설정하고
import 할 수 있는 모듈을 하나하나 정의해 주어야 한다.

# game/sound/__init__.py
__all__ = ['echo']				/ echo.py 를 import 하게 해준다.

from game.sound.echo import *		/ 위를 하지 않아도 이것은 정상 작동한다. from 의 마지막 항목이 모듈인 경우는 잘 작동한다.	
echo.함수명			


relative 패키지
만약 graphic 디렉터리의 render.py 항목이 sound 디렉터리의 echo.py 파일에 있는 함수를 가져다 쓰고 싶은 경우

#render.py
from ..sound.echo import 함수명		/ .. 은 부모 디렉토리를 뜻한다. 즉 여기선 game 을 뜻하므로 이 구문은 game.sound.echo 라는 뜻과 같아진다.


예외 처리 / 오류 처리

try :
except [발생 오류 [ as 오류 메세지 변수]] :	/ [] 괄호 안은 내용을 생략 가능하다.
finally :					/ 예외 발생 여부와 관계 없이 수행한다.

ex)
try :
	4 / 0
except ZeroDivisionError as e:
	print(e)				/ 에러명이 ZeroDivisionError 이고, 이 변수가 e.
finally :
	print("계산 결과 : ")			/ 위의 에러와 관계 없이 실행된다.

// except 안에 pass 를 넣으면 오류가 발생하더라도 발생시키지 않고 그냥 통과한다.


raise 발생오류				/ 오류를 일부러 발생시킨다.


내장함수집합

abs(x)					/ x 의 절대값을 리턴
all(x)					/ 반복 가능한 자료형을 받는다. x 가 모두 참이면 True, 하나라도 거짓이면 False 를 리턴한다.
any(x)					/ 반복 가능한 자료형을 받는다. x 가 하나라도 참이면 True, 모두 거짓이면 False 를 리턴한다.
chr(x)					/ 아스키 코드값을 받는다. 그 코드에 해당하는 문자를 출력한다. (0~127)
ord(x)					/ 문자의 아스키 코드값을 리턴한다.
dir(x)					/ 객체가 자체적으로 갖고 있는 변수, 함수를 보여준다.
divmod(x,y)				/ x 를 y 로 나눈 몫, 나머지를 튜플 형태로 리턴한다.
enumerate(x)				/ 리스트, 튜플, 문자열을 입력으로 받아 enumerate 행 객체를 리턴한다.
eval(exp)					/ exp 내 실행 가능한 문자열을 입력으로 받아 실행한 결과를 리턴한다. 함수나 클래스를 동적으로 실행할 때 사용.
filter(exp,x)				/ exp로 함수 이름을, x 에 반복 가능한 자료형을 받는다. 자료형 요소들의 값이 exp 에 들어간 함수에 입력되었을 시, 리턴 값이 참인것만 묶어 돌려준다.
hex(x)					/ 정수값을 16진수로 변환한다.
oct(x)					/ 정수값을 8진수로 변환한다.
id(x)					/ 객체를 입력받아 고유 주소값을 리턴한다.
input(prompt)				/ 사용자의 입력을 받는다.
int(x)	int(x,y)				/ 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수로 리턴시킨다. y 에는 진수가 들어간다.
isinstance(obj, class)			/ obj 에 인스턴스를 받고 뒤에 클래스 명을 받는다. 해당 인스턴스가 그 클래스의 인스턴스인지 판단하여 True, False 를 리턴한다.
lambda 인수 : 표현식			/ 함수를 생성할 때 사용하는 예약어. def 와 동일.
len(x)					/ 입력값의 길이를 리턴한다. (요소 전체 개수를 리턴한다.)
list(x)					/ 반복 가능한 자료형을 입력받아 리스트로 만들어 리턴한다.
map(exp,y)				/ exp 에 함수를, y 에 실행 가능한 자료형을 입력으로 받는다. 자료형의 각 요소가 함수에 의해 수행된 결과를 리턴한다.
max(x)					/ 해당 자료형 안의 인수들 중 최대값을 리턴한다.
min(x)					/ 해당 자료형 안의 인수들 중 최소값을 리턴한다.
pow(x,y)					/ x^y 를 리턴한다.
range(start, stop, step)			/ 입력받은 숫자에 해당되는 범위의 값을 반복 가능한 객체로 리턴한다.
sorted(x)					/ 받은 값을 오름차순 정렬하여 리스트로 리턴한다.
str(obj)					/ 문자열 형태로 객체를 변환한다.
tuple(exp)				/ 반복 가능한 자료형 exp 를 받아 튜플 형태로 리턴한다.
type(obj)					/ 해당 입력값의 자료형을 보여준다.
zip(obj1,obj2....)				/ 각 입력된 obj 들이 동일한 개수라면 순서대로 자료들을 묶어준다. list(zip(...))

변수 이름 색인 순서 : 지역 -> 전역 -> 빌트인 (스코핑 룰)

g = lambda x,y : x*y			/ 익명 함수.
g(2,3) = 6